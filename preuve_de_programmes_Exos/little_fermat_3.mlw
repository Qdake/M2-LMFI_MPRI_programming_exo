(** {1 MPRI lecture 2-36-1 "Proof of Programs"} *)

(** {2 Fermat's little theorem for n = 3} *)


use int.Int
use int.Power

(**************************************************
les ATP ne comprennent pas la notation   power x n
*************************************************)
lemma lemma1 : forall x:int. power x 0 = 1
lemma lemma4 : forall x:int. power x 2 = x * x
lemma lemma5 : forall x:int. power x 3 = x * power x 2
lemma lemma3 : forall x:int. power x 3 = x * x * x
(*lemma lemma2 : forall x:int. forall n:int. n >= 1 -> power x n = x * (power x (n-1))*)

(*
lemma power_0_left : forall n. power 0 0 = 1 /\ (n >= 1 -> power 0 n = 0)   

lemma power_x_2 : forall x:int. power x 2 = x * x

(*lemma trivial : forall x:int. forall n:int. n >= 0 -> power x (n+1) = x * (power x n)*)
lemma trivial2 : forall x:int. power x 3 = x * x * x

*)

(*
let rec lemma power_n_3_ind (x:int) 
  requires { x >= 1 }
  variant { x }
  ensures { power x 3 = result /\ result = power (x-1) 3 + 3 * (power x 2) - 3 * x + 1 }
= if x = 1 then 1
  else (power_n_3_ind (x-1)) + 3 * (power x 2) - 3 * x + 1 
*)  

(*
let rec lemma power_n_3_rec (x:int) 
  requires { x >= 1 }
  variant { x }
  ensures { power (x-1) 3 = power x 3 - 3 * (power x 2) + 3 * x - 1 }
= if x  = 1 then ()
  else power_n_3_rec (x-1)
*)

(*--------------------------- Local Context ---------------------------

power_0_left : forall n:int. n >= 1 -> power 0 n = 0

constant x : int

Requires : x >= 1

H :
  x = 1 \/
  (let o = x - 1 in
   power (o - 1) 3 = (((power o 3 - ((3 * o) * o)) + (3 * o)) - 1))
   
   x = 1 \/ (x-2)^3 = (x-1)^3 - 3 * (x-1)^2 + 3 * (x-1) -1

------------------------------- Goal --------------------------------

goal power_n_3_rec'vc :
  power (x - 1) 3 = (((power x 3 - ((3 * x) * x)) + (3 * x)) - 1)

  (x-1)^3 = x^3 - 3 * x^2 + 3*x - 1
  *)



let rec ghost little_fermat_3 (x : int) : int
  requires { x >= 0 }
  variant { x }
  ensures { power x 3 - x = 3 * result }
= if x = 0 then 0 else (little_fermat_3 (x-1)) + x * x - x
             (*             (x - 1) ^ 3 = x^3 - 3 * x^2 + 3 * x - 1 
              =>  (x - 1) ^ 3 - (x - 1) = x^3 - 3 * x^2 + 2 * x
(x - 1) ^ 3 - (x - 1) + 3 * x^2 - 2 * x = x^3
                                x^3 - x = (x - 1) ^ 3 - (x - 1) + 3 * x^2 - 2 * x  - x
                                x^3 - x = (x - 1) ^ 3 - (x - 1) + 3 * x^2 - 3 * x   
 *)  

let lemma lem_little_fermat_3 (x : int)
  requires { x >= 0 }
  ensures { exists y. power x 3 - x = 3 * y }
= little_fermat_3 x
